{"ast":null,"code":"import _classCallCheck from \"/Users/jamesroyston/Projects/fullstackreact_tut/weatherapp_fork_dluce/myapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jamesroyston/Projects/fullstackreact_tut/weatherapp_fork_dluce/myapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jamesroyston/Projects/fullstackreact_tut/weatherapp_fork_dluce/myapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jamesroyston/Projects/fullstackreact_tut/weatherapp_fork_dluce/myapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jamesroyston/Projects/fullstackreact_tut/weatherapp_fork_dluce/myapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/jamesroyston/Projects/fullstackreact_tut/weatherapp_fork_dluce/myapp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/jamesroyston/Projects/fullstackreact_tut/weatherapp_fork_dluce/myapp/src/App.js\";\nimport React from 'react'; // import './App.css';\n// import $ from 'jquery';\n\nimport axios from 'axios';\n\nvar getWeatherUrl = function getWeatherUrl(lat, long) {\n  return \"https://api.openweathermap.org/data/2.5/weather?lat=\".concat(lat, \"&lon=\").concat(long, \"&units=imperial&,us&appid=fa85391408d3e1a5d77d51507c0dfd61\");\n};\n\nvar getGeocoding = function getGeocoding(lat, long) {\n  return \"https://maps.googleapis.com/maps/api/geocode/json?latlng=\".concat(lat, \",\").concat(long, \"&sensor=true&key=AIzaSyCJB7ji6GSFhxbLO0GxtTqrbVa8LrOKkzo\");\n};\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      celcius: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"handleClick\",\n    value: function handleClick() {\n      this.setState({\n        celcius: !this.state.celcius\n      });\n    } // This function loads before the page loads. It is how I'm handling loading the\n    // data before it's pulled in with AJAX\n\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      if (navigator.geolocation) {\n        var success1 = function success1(pos) {\n          var _this2 = this;\n\n          var crd = pos.coords;\n          var latitude = crd.latitude;\n          var longitude = crd.longitude;\n          axios.get(getWeatherUrl(latitude, longitude)).then(function (response) {\n            console.log(response.data);\n\n            _this2.setState({\n              tempFahrenheit: response.data.main.temp,\n              tempCelcius: toCelcius(response.data.main.temp),\n              humidity: response.data.main.humidity,\n              pressure: response.data.main.pressure,\n              tempMin: response.data.main.temp_min,\n              tempMax: response.data.main.temp_max,\n              seaLevel: response.data.main.sea_level,\n              windSpeed: (response.data.wind.speed / .44704).toFixed(2),\n              weather: response.data.weather[0].main,\n              description: response.data.weather[0].description.capitalize(),\n              id: response.data.weather[0].id,\n              icon: response.data.weather[0].icon,\n              sunrise: response.data.sys.sunrise,\n              sunset: response.data.sys.sunset,\n              latitude: response.data.latitude,\n              longitude: response.data.longitude,\n              date: formatDate(new Date()),\n              loading: false,\n              error: null\n            });\n          }).catch(function (err) {\n            _this2.setState({\n              loading: false,\n              error: err\n            });\n          });\n        };\n        /***********************************************************\n         */\n\n\n        var success2 = function success2(pos) {\n          var _this3 = this;\n\n          var crd = pos.coords;\n          var latitude = crd.latitude;\n          var longitude = crd.longitude; // I guess 'this.serverRequest' is arbitrary\n          // You can use this.anything, `let anything =`, or get rid of it \n          // altogether\n\n          this.serverRequest = axios.get(getGeocoding(latitude, longitude)).then(function (response) {\n            console.log(response);\n\n            _this3.setState({\n              city: response.data.results[3].formatted_address\n            });\n          }).catch(function (err) {\n            _this3.setState({\n              loading: false,\n              error: err\n            });\n          });\n        };\n\n        var error = function error() {\n          alert('geolocation error');\n        };\n\n        navigator.geolocation.getCurrentPosition(success1.bind(this), error);\n        navigator.geolocation.getCurrentPosition(success2.bind(this), error);\n      } // repeat above block for geolocation and then use response as params\n      // for getGeocoding\n      // if(navigator.geolocation) {\n      //   function error() {\n      //     alert('geolocation error');\n      //   }\n      // }\n      //\n\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(Weather, {\n        description: this.state.description,\n        city: this.state.city,\n        date: this.state.date,\n        temp: this.state.celcius ? this.state.tempFahrenheit : this.state.tempCelcius,\n        onClick: this.handleClick,\n        country: this.state.country,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }), React.createElement(WeatherBox, {\n        humidity: this.state.humidity,\n        pressure: this.state.pressure,\n        seaLevel: this.state.seaLevel,\n        tempMax: this.state.tempMax,\n        tempMin: this.state.tempMin,\n        windSpeed: this.state.windSpeed,\n        imageSrc: this.state.icon ? \"https://res.cloudinary.com/lucedesign/image/upload/v1509486590/svg%20weather%20icons/\".concat(idIconLookup[this.state.id]) : \"https://res.cloudinary.com/lucedesign/image/upload/v1509486574/svg%20weather%20icons/day.svg\",\n        country: this.state.country,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(React.Component); // Contains the weather, description, city, date, and temp\n\n\nvar Weather = function Weather(props) {\n  return React.createElement(\"div\", {\n    className: \"weather\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, props.description ? \"\".concat(props.description, \" in\") : \"\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, props.city ? \"\".concat(props.city) : \"\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, props.date ? \"\".concat(props.date) : \"\"), React.createElement(\"p\", {\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, props.temp ? \"\".concat(props.temp, \"\\xB0\") : \"\"));\n}; // The rounded weather box that contains the icon and additional weather data\n\n\nvar WeatherBox = function WeatherBox(props) {\n  return React.createElement(\"div\", {\n    className: \"weather-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"humidity container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, props.pressure ? \"Pressure: \".concat(props.pressure, \" hPa\") : \"\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, props.humidity ? \"Humidity: \".concat(props.humidity, \"%\") : \"\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, props.seaLevel ? \"Sea Level: \".concat(props.seaLevel) : \"\")), React.createElement(\"img\", {\n    src: props.imageSrc,\n    alt: \"alt filler text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"tempMax container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, props.tempMax ? \"Max Temp: \".concat(props.tempMax, \"\\xB0\") : \"\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, props.tempMin ? \"Min Temp: \".concat(props.tempMin, \"\\xB0\") : \"\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, props.windSpeed ? \"Wind Speed: \".concat(props.windSpeed, \" mph\") : \"\")));\n}; // Add a function to the String type to capitalize all letters in a sentence\n\n\nString.prototype.capitalize = function () {\n  return this.replace(/(?:^|\\s)\\S/g, function (a) {\n    return a.toUpperCase();\n  });\n}; // Helper functions -------------------------------------------------\n\n\nvar toCelcius = function toCelcius(temp) {\n  return ((temp - 32) * 5 / 9).toFixed(1);\n}; // Check if it's between 6am and 6pm and return true or false\n\n\nvar isDayTime = function isDayTime() {\n  var date = new Date();\n  var hour = date.getHours();\n\n  if (hour < 18 && hour > 6) {\n    return true;\n  } else {\n    return false;\n  }\n}; // Get a pretty date\n\n\nvar formatDate = function formatDate(date) {\n  var monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  var day = date.getDate();\n  var monthIndex = date.getMonth();\n  var year = date.getFullYear();\n  return \"\".concat(monthNames[monthIndex], \" \").concat(day, \", \").concat(year);\n}; // Icon Lookup Table ----------------------------------------------------------------------------\n\n\nvar idIconLookup = {\n  200: \"thunder.svg\",\n  201: \"thunder.svg\",\n  202: \"thunder.svg\",\n  210: \"thunder.svg\",\n  211: \"thunder.svg\",\n  212: \"thunder.svg\",\n  221: \"thunder.svg\",\n  230: \"thunder.svg\",\n  231: \"thunder.svg\",\n  232: \"thunder.svg\",\n  300: \"rainy-4.svg\",\n  301: \"rainy-4.svg\",\n  302: \"rainy-4.svg\",\n  310: \"rainy-5.svg\",\n  311: \"rainy-5.svg\",\n  312: \"rainy-5.svg\",\n  313: \"rainy-6.svg\",\n  314: \"rainy-6.svg\",\n  321: \"rainy-6.svg\",\n  500: \"rainy-7.svg\",\n  501: \"rainy-7.svg\",\n  502: \"rainy-7.svg\",\n  503: \"rainy-7.svg\",\n  504: \"rainy-7.svg\",\n  511: \"rainy-7.svg\",\n  520: \"rainy-7.svg\",\n  521: \"rainy-7.svg\",\n  522: \"rainy-7.svg\",\n  531: \"rainy-7.svg\",\n  600: \"snowy-4.svg\",\n  601: \"snowy-4.svg\",\n  611: \"snowy-4.svg\",\n  612: \"snowy-5.svg\",\n  615: \"snowy-5.svg\",\n  616: \"snowy-5.svg\",\n  620: \"snowy-6.svg\",\n  621: \"snow-6.svg\",\n  622: \"snowy-6.svg\",\n  701: \"cloudy.svg\",\n  711: \"cloudy.svg\",\n  721: \"cloudy.svg\",\n  731: \"cloudy.svg\",\n  741: \"cloudy.svg\",\n  751: \"cloudy.svg\",\n  761: \"cloudy.svg\",\n  762: \"cloudy.svg\",\n  771: \"cloudy.svg\",\n  781: \"cloudy.svg\",\n  800: isDayTime() ? \"day.svg\" : \"night.svg\",\n  801: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\",\n  802: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\",\n  803: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\",\n  804: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\"\n};\nexport default App;","map":{"version":3,"sources":["/Users/jamesroyston/Projects/fullstackreact_tut/weatherapp_fork_dluce/myapp/src/App.js"],"names":["React","axios","getWeatherUrl","lat","long","getGeocoding","App","handleClick","bind","state","celcius","setState","navigator","geolocation","success1","pos","crd","coords","latitude","longitude","get","then","response","console","log","data","tempFahrenheit","main","temp","tempCelcius","toCelcius","humidity","pressure","tempMin","temp_min","tempMax","temp_max","seaLevel","sea_level","windSpeed","wind","speed","toFixed","weather","description","capitalize","id","icon","sunrise","sys","sunset","date","formatDate","Date","loading","error","catch","err","success2","serverRequest","city","results","formatted_address","alert","getCurrentPosition","country","idIconLookup","Component","Weather","props","onClick","WeatherBox","imageSrc","String","prototype","replace","a","toUpperCase","isDayTime","hour","getHours","monthNames","day","getDate","monthIndex","getMonth","year","getFullYear"],"mappings":"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","sourcesContent":["import React from 'react';\n// import './App.css';\n// import $ from 'jquery';\nimport axios from 'axios';\n\nconst getWeatherUrl = (lat, long) => {\n  return `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&units=imperial&,us&appid=fa85391408d3e1a5d77d51507c0dfd61`;\n};\n\nconst getGeocoding = (lat, long) => {\n  return `https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${long}&sensor=true&key=AIzaSyCJB7ji6GSFhxbLO0GxtTqrbVa8LrOKkzo`;\n};\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.handleClick = this.handleClick.bind(this);\n    this.state = {\n\n      celcius: true,\n\n    };\n  }\n  \n  handleClick() {\n    this.setState({\n      celcius: !this.state.celcius\n    });\n  }\n\n  // This function loads before the page loads. It is how I'm handling loading the\n  // data before it's pulled in with AJAX\n  componentWillMount() {\n    if (navigator.geolocation) {\n\n      function success1(pos) {\n        let crd = pos.coords;\n        let latitude = crd.latitude;\n        let longitude = crd.longitude;\n        \n        axios.get(getWeatherUrl(latitude, longitude))\n          .then(response => {\n            console.log(response.data);\n            this.setState({\n              tempFahrenheit: response.data.main.temp,\n              tempCelcius: toCelcius(response.data.main.temp),\n              humidity: response.data.main.humidity,\n              pressure: response.data.main.pressure,\n              tempMin: response.data.main.temp_min,\n              tempMax: response.data.main.temp_max,\n              seaLevel: response.data.main.sea_level,\n              windSpeed: (response.data.wind.speed / .44704).toFixed(2),\n              weather: response.data.weather[0].main,\n              description: response.data.weather[0].description.capitalize(),\n              id: response.data.weather[0].id,\n              icon: response.data.weather[0].icon,\n              sunrise: response.data.sys.sunrise,\n              sunset: response.data.sys.sunset,\n              latitude: response.data.latitude,\n              longitude:  response.data.longitude,\n              date: formatDate(new Date()),\n              loading: false,\n              error: null,\n            });\n          })\n          .catch(err => {\n            this.setState({\n              loading: false,\n              error: err,\n            })\n          })\n      }\n\n      /***********************************************************\n       */\n      function success2(pos) {\n        let crd = pos.coords;\n        let latitude = crd.latitude;\n        let longitude = crd.longitude;\n        \n        // I guess 'this.serverRequest' is arbitrary\n        // You can use this.anything, `let anything =`, or get rid of it \n        // altogether\n        this.serverRequest = axios.get(getGeocoding(latitude, longitude))\n          .then(response => {\n            console.log(response)\n            this.setState({\n              city: response.data.results[3].formatted_address,\n            });\n          })\n          .catch(err => {\n            this.setState({\n              loading: false,\n              error: err,\n            })\n          })\n      }\n\n\n      \n      function error() {\n        alert('geolocation error');\n      }\n      navigator.geolocation.getCurrentPosition(success1.bind(this), error);\n      navigator.geolocation.getCurrentPosition(success2.bind(this), error)\n\n    }\n\n// repeat above block for geolocation and then use response as params\n// for getGeocoding\n\n    // if(navigator.geolocation) {\n      \n\n    //   function error() {\n    //     alert('geolocation error');\n    //   }\n    // }\n\n//\n}\n\n\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Weather\n          description={this.state.description}\n          city={this.state.city}\n          date={this.state.date}\n          temp={this.state.celcius ? this.state.tempFahrenheit : this.state.tempCelcius}\n          onClick={this.handleClick}\n          country={this.state.country}\n        />\n        <WeatherBox\n          humidity={this.state.humidity}\n          pressure={this.state.pressure}\n          seaLevel={this.state.seaLevel}\n          tempMax={this.state.tempMax}\n          tempMin={this.state.tempMin}\n          windSpeed={this.state.windSpeed}\n          imageSrc={\n            this.state.icon\n              ? `https://res.cloudinary.com/lucedesign/image/upload/v1509486590/svg%20weather%20icons/${idIconLookup[this.state.id]}`\n              : `https://res.cloudinary.com/lucedesign/image/upload/v1509486574/svg%20weather%20icons/day.svg`\n          }\n          country={this.state.country}\n        />\n      </div>\n    )\n  }\n}\n\n// Contains the weather, description, city, date, and temp\nconst Weather = props => (\n  <div className=\"weather\">\n    <p>{props.description ? `${props.description} in` : \"\"}</p>\n    <p>{props.city ? `${props.city}` : \"\"}</p>\n    <p>{props.date ? `${props.date}` : \"\"}</p>\n    <p onClick={props.onClick}>{props.temp ? `${props.temp}°` : \"\"}</p>\n  </div>\n);\n\n\n// The rounded weather box that contains the icon and additional weather data\nconst WeatherBox = props => (\n  <div className=\"weather-box\">\n    <div className=\"humidity container\">\n      <p>{props.pressure ? `Pressure: ${props.pressure} hPa` : \"\"}</p>\n      <p>{props.humidity ? `Humidity: ${props.humidity}%` : \"\"}</p>\n      <p>{props.seaLevel ? `Sea Level: ${props.seaLevel}` : \"\"}</p>\n    </div>\n    <img src={props.imageSrc} \n         alt='alt filler text'/>\n    <div className=\"tempMax container\">\n      <p>{props.tempMax ? `Max Temp: ${props.tempMax}°` : \"\"}</p>\n      <p>{props.tempMin ? `Min Temp: ${props.tempMin}°` : \"\"}</p>\n      <p>{props.windSpeed ? `Wind Speed: ${props.windSpeed} mph` : \"\"}</p>\n    </div>\n  </div>\n);\n\n// Add a function to the String type to capitalize all letters in a sentence\nString.prototype.capitalize = function() {\n  return this.replace(/(?:^|\\s)\\S/g, function(a) {\n    return a.toUpperCase();\n  });\n};\n\n// Helper functions -------------------------------------------------\nlet toCelcius = (temp) => ((temp - 32) * 5 / 9).toFixed(1);\n\n\n// Check if it's between 6am and 6pm and return true or false\nlet isDayTime = () => {\n  let date = new Date();\n  let hour = date.getHours();\n  if (hour < 18 && hour > 6) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n\n// Get a pretty date\nlet formatDate = (date) => {\n  let monthNames = [\n    \"January\", \"February\", \"March\",\n    \"April\", \"May\", \"June\", \"July\",\n    \"August\", \"September\", \"October\",\n    \"November\", \"December\"\n  ];\n\n  let day = date.getDate();\n  let monthIndex = date.getMonth();\n  let year = date.getFullYear();\n\n  return `${monthNames[monthIndex]} ${day}, ${year}`;\n}\n\n\n\n// Icon Lookup Table ----------------------------------------------------------------------------\nlet idIconLookup = {\n  200: \"thunder.svg\",\n  201: \"thunder.svg\",\n  202: \"thunder.svg\",\n  210: \"thunder.svg\",\n  211: \"thunder.svg\",\n  212: \"thunder.svg\",\n  221: \"thunder.svg\",\n  230: \"thunder.svg\",\n  231: \"thunder.svg\",\n  232: \"thunder.svg\",\n  300: \"rainy-4.svg\",\n  301: \"rainy-4.svg\",\n  302: \"rainy-4.svg\",\n  310: \"rainy-5.svg\",\n  311: \"rainy-5.svg\",\n  312: \"rainy-5.svg\",\n  313: \"rainy-6.svg\",\n  314: \"rainy-6.svg\",\n  321: \"rainy-6.svg\",\n  500: \"rainy-7.svg\",\n  501: \"rainy-7.svg\",\n  502: \"rainy-7.svg\",\n  503: \"rainy-7.svg\",\n  504: \"rainy-7.svg\",\n  511: \"rainy-7.svg\",\n  520: \"rainy-7.svg\",\n  521: \"rainy-7.svg\",\n  522: \"rainy-7.svg\",\n  531: \"rainy-7.svg\",\n  600: \"snowy-4.svg\",\n  601: \"snowy-4.svg\",\n  611: \"snowy-4.svg\",\n  612: \"snowy-5.svg\",\n  615: \"snowy-5.svg\",\n  616: \"snowy-5.svg\",\n  620: \"snowy-6.svg\",\n  621: \"snow-6.svg\",\n  622: \"snowy-6.svg\",\n  701: \"cloudy.svg\",\n  711: \"cloudy.svg\",\n  721: \"cloudy.svg\",\n  731: \"cloudy.svg\",\n  741: \"cloudy.svg\",\n  751: \"cloudy.svg\",\n  761: \"cloudy.svg\",\n  762: \"cloudy.svg\",\n  771: \"cloudy.svg\",\n  781: \"cloudy.svg\",\n  800: isDayTime() ? \"day.svg\" : \"night.svg\",\n  801: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\",\n  802: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\",\n  803: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\",\n  804: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\"\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}