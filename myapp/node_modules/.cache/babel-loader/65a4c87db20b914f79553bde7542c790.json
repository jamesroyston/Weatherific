{"ast":null,"code":"import _classCallCheck from \"/Users/jamesroyston/Projects/fullstackreact_tut/weatherapp_fork_dluce/myapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jamesroyston/Projects/fullstackreact_tut/weatherapp_fork_dluce/myapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jamesroyston/Projects/fullstackreact_tut/weatherapp_fork_dluce/myapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jamesroyston/Projects/fullstackreact_tut/weatherapp_fork_dluce/myapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jamesroyston/Projects/fullstackreact_tut/weatherapp_fork_dluce/myapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/jamesroyston/Projects/fullstackreact_tut/weatherapp_fork_dluce/myapp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/jamesroyston/Projects/fullstackreact_tut/weatherapp_fork_dluce/myapp/src/App.js\";\nimport React from 'react';\nimport './App.css'; // import $ from 'jquery';\n\nimport axios from 'axios';\n\nvar getWeatherUrl = function getWeatherUrl(city) {\n  return \"https://api.openweathermap.org/data/2.5/weather?q=\".concat(city, \",us&units=imperial&,us&appid=fa85391408d3e1a5d77d51507c0dfd61\");\n}; // const getGeocoding = (lat, long) => {\n//   return `https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${long}&sensor=true&key=AIzaSyCJB7ji6GSFhxbLO0GxtTqrbVa8LrOKkzo`;\n// };\n\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this)); // this.handleClick = this.handleClick.bind(this);\n\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      celcius: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"getWeather\",\n    value: function getWeather() {\n      var _this2 = this;\n\n      axios.get(getWeatherUrl(this.state.city)).then(function (response) {\n        console.log(response.data);\n\n        _this2.setState({\n          tempFahrenheit: response.data.main.temp,\n          tempCelcius: toCelcius(response.data.main.temp),\n          humidity: response.data.main.humidity,\n          pressure: response.data.main.pressure,\n          tempMin: response.data.main.temp_min,\n          tempMax: response.data.main.temp_max,\n          windSpeed: (response.data.wind.speed / .44704).toFixed(2),\n          weather: response.data.weather[0].main,\n          country: response.data.sys.country,\n          description: response.data.weather[0].description.capitalize(),\n          id: response.data.weather[0].id,\n          icon: \"http://openweathermap.org/img/w/\".concat(response.data.weather[0].icon, \".png\"),\n          sunrise: response.data.sys.sunrise,\n          sunset: response.data.sys.sunset,\n          latitude: response.data.latitude,\n          longitude: response.data.longitude,\n          date: formatDate(new Date()),\n          loading: false,\n          error: null\n        });\n      }).catch(function (err) {\n        _this2.setState({\n          loading: false,\n          error: err\n        });\n      });\n    } // handleClick() {\n    //   this.setState({\n    //     celcius: !this.state.celcius,\n    //   });\n    // }\n\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(e) {\n      console.log(this.state.city);\n      this.setState({\n        city: this.state.inputValue\n      });\n      console.log(this.state.city);\n      this.getWeather();\n      this.setState({\n        inputValue: ''\n      });\n      e.preventDefault();\n      console.log('City: ' + this.state.city + ' was submitted for get request.');\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(e) {\n      this.setState({\n        inputValue: e.target.value.split(' ').join('+')\n      });\n      console.log(this.state.inputValue);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log('mounting- mounted'); // this.getWeather()\n      // why doesn't this work? I've read that you should make AJAX reqs \n      // in this lifecycle methods\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        className: \"form\",\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        className: \"inputField\",\n        type: \"text\",\n        value: this.state.inputValue,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        className: \"submitButton\",\n        type: \"submit\",\n        value: \"Submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      })), React.createElement(Weather, {\n        description: this.state.description,\n        city: this.state.city,\n        date: this.state.date,\n        temp: this.state.celcius ? this.state.tempFahrenheit : this.state.tempCelcius,\n        onClick: this.handleClick,\n        country: this.state.country,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }), React.createElement(WeatherBox, {\n        humidity: this.state.humidity,\n        pressure: this.state.pressure,\n        tempMax: this.state.tempMax,\n        tempMin: this.state.tempMin,\n        windSpeed: this.state.windSpeed,\n        imageSrc: this.state.icon ? \"https://res.cloudinary.com/lucedesign/image/upload/v1509486590/svg%20weather%20icons/\".concat(idIconLookup[this.state.id]) : \"https://res.cloudinary.com/lucedesign/image/upload/v1509486574/svg%20weather%20icons/weather.svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(React.Component); // Contains the weather, description, city, date, and temp\n\n\nvar Weather = function Weather(props) {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, props.description ? \"\".concat(props.description, \" in \") : \"\", React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, props.city ? \"\".concat(props.city.capitalize(), \", \").concat(props.country) : \"\")), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, props.date ? \"\".concat(props.date) : \"\"), React.createElement(\"p\", {\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, props.temp ? \"\".concat(props.temp, \"\\u02DAF\") : \"\"));\n}; // The rounded weather box that contains the icon and additional weather data\n\n\nvar WeatherBox = function WeatherBox(props) {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    className: \"weatherIcon\",\n    src: props.imageSrc,\n    alt: \"filler\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, props.tempMin && props.tempMax ? \"Lo/Hi : \".concat(props.tempMin, \"\\xB0F / \").concat(props.tempMax, \"\\u02DAF\") : \"\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, props.windSpeed ? \"Wind Speed: \".concat(props.windSpeed, \" mph\") : \"\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, props.humidity ? \"Humidity: \".concat(props.humidity, \"%\") : \"\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, props.pressure ? \"Pressure: \".concat(props.pressure, \" hPa\") : \"\"));\n}; // Add a function to the String type to capitalize all letters in a sentence\n\n\nString.prototype.capitalize = function () {\n  return this.replace(/(?:^|\\s)\\S/g, function (a) {\n    return a.toUpperCase();\n  });\n}; // Helper functions -------------------------------------------------\n\n\nvar toCelcius = function toCelcius(temp) {\n  return ((temp - 32) * 5 / 9).toFixed(1);\n}; // Check if it's between 6am and 6pm and return true or false\n// let isDayTime = () => {\n//   let date = new Date();\n//   let hour = date.getHours();\n//   (hour < 18 && hour > 6) ? true : false;\n// }\n// let formatSunrise = () => {\n// }\n\n\nisDayTime() ? formatSunrise() : formatSunset(); // Get a pretty date\n\nvar formatDate = function formatDate(date) {\n  var monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  var day = date.getDate();\n  var monthIndex = date.getMonth();\n  var year = date.getFullYear();\n  return \"\".concat(monthNames[monthIndex], \" \").concat(day, \", \").concat(year);\n}; // Icon Lookup Table ----------------------------------------------------------------------------\n\n\nvar idIconLookup = {\n  200: \"thunder.svg\",\n  201: \"thunder.svg\",\n  202: \"thunder.svg\",\n  210: \"thunder.svg\",\n  211: \"thunder.svg\",\n  212: \"thunder.svg\",\n  221: \"thunder.svg\",\n  230: \"thunder.svg\",\n  231: \"thunder.svg\",\n  232: \"thunder.svg\",\n  300: \"rainy-4.svg\",\n  301: \"rainy-4.svg\",\n  302: \"rainy-4.svg\",\n  310: \"rainy-5.svg\",\n  311: \"rainy-5.svg\",\n  312: \"rainy-5.svg\",\n  313: \"rainy-6.svg\",\n  314: \"rainy-6.svg\",\n  321: \"rainy-6.svg\",\n  500: \"rainy-7.svg\",\n  501: \"rainy-7.svg\",\n  502: \"rainy-7.svg\",\n  503: \"rainy-7.svg\",\n  504: \"rainy-7.svg\",\n  511: \"rainy-7.svg\",\n  520: \"rainy-7.svg\",\n  521: \"rainy-7.svg\",\n  522: \"rainy-7.svg\",\n  531: \"rainy-7.svg\",\n  600: \"snowy-4.svg\",\n  601: \"snowy-4.svg\",\n  611: \"snowy-4.svg\",\n  612: \"snowy-5.svg\",\n  615: \"snowy-5.svg\",\n  616: \"snowy-5.svg\",\n  620: \"snowy-6.svg\",\n  621: \"snow-6.svg\",\n  622: \"snowy-6.svg\",\n  701: \"cloudy.svg\",\n  711: \"cloudy.svg\",\n  721: \"cloudy.svg\",\n  731: \"cloudy.svg\",\n  741: \"cloudy.svg\",\n  751: \"cloudy.svg\",\n  761: \"cloudy.svg\",\n  762: \"cloudy.svg\",\n  771: \"cloudy.svg\",\n  781: \"cloudy.svg\",\n  800: isDayTime() ? \"day.svg\" : \"night.svg\",\n  801: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\",\n  802: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\",\n  803: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\",\n  804: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\"\n};\nexport default App;","map":{"version":3,"sources":["/Users/jamesroyston/Projects/fullstackreact_tut/weatherapp_fork_dluce/myapp/src/App.js"],"names":["React","axios","getWeatherUrl","city","App","handleChange","bind","handleSubmit","state","celcius","get","then","response","console","log","data","setState","tempFahrenheit","main","temp","tempCelcius","toCelcius","humidity","pressure","tempMin","temp_min","tempMax","temp_max","windSpeed","wind","speed","toFixed","weather","country","sys","description","capitalize","id","icon","sunrise","sunset","latitude","longitude","date","formatDate","Date","loading","error","catch","err","e","inputValue","getWeather","preventDefault","target","value","split","join","handleClick","idIconLookup","Component","Weather","props","onClick","WeatherBox","imageSrc","String","prototype","replace","a","toUpperCase","isDayTime","formatSunrise","formatSunset","monthNames","day","getDate","monthIndex","getMonth","year","getFullYear"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n// import $ from 'jquery';\nimport axios from 'axios';\n\nconst getWeatherUrl = (city) => {\n  return `https://api.openweathermap.org/data/2.5/weather?q=${city},us&units=imperial&,us&appid=fa85391408d3e1a5d77d51507c0dfd61`;\n};\n\n// const getGeocoding = (lat, long) => {\n//   return `https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${long}&sensor=true&key=AIzaSyCJB7ji6GSFhxbLO0GxtTqrbVa8LrOKkzo`;\n// };\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    // this.handleClick = this.handleClick.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.state = {\n      celcius: true,\n    };\n  }\n\n  getWeather() {\n    axios.get(getWeatherUrl(this.state.city))\n    .then(response => {\n      console.log(response.data)\n      this.setState({\n        tempFahrenheit: response.data.main.temp,\n        tempCelcius: toCelcius(response.data.main.temp),\n        humidity: response.data.main.humidity,\n        pressure: response.data.main.pressure,\n        tempMin: response.data.main.temp_min,\n        tempMax: response.data.main.temp_max,\n        windSpeed: (response.data.wind.speed / .44704).toFixed(2),\n        weather: response.data.weather[0].main,\n        country: response.data.sys.country,\n        description: response.data.weather[0].description.capitalize(),\n        id: response.data.weather[0].id,\n        icon: `http://openweathermap.org/img/w/${response.data.weather[0].icon}.png`,\n        sunrise: response.data.sys.sunrise,\n        sunset: response.data.sys.sunset,\n        latitude: response.data.latitude,\n        longitude:  response.data.longitude,\n        date: formatDate(new Date()),\n        loading: false,\n        error: null,\n      });\n    })\n    .catch(err => {\n      this.setState({\n        loading: false,\n        error: err,\n      })\n    })\n  }\n\n  // handleClick() {\n  //   this.setState({\n  //     celcius: !this.state.celcius,\n  //   });\n  // }\n\n  handleSubmit(e) {\n    console.log(this.state.city)\n    this.setState({\n      city: this.state.inputValue,\n    })\n    console.log(this.state.city)\n    this.getWeather()\n    this.setState({ inputValue: '',})\n    e.preventDefault()\n    console.log('City: ' + this.state.city + ' was submitted for get request.')\n  }\n\n  handleChange(e) {\n    this.setState({\n      inputValue: e.target.value.split(' ').join('+'),\n    })\n    console.log(this.state.inputValue)\n  }\n\n\n  componentDidMount() {\n    console.log('mounting- mounted')\n    // this.getWeather()\n    // why doesn't this work? I've read that you should make AJAX reqs \n    // in this lifecycle methods\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n\n        <form className=\"form\" onSubmit={this.handleSubmit}>\n          <input className=\"inputField\" type=\"text\" value={this.state.inputValue} onChange={this.handleChange}/>\n          <input className=\"submitButton\" type=\"submit\" value=\"Submit\"/>\n        </form>\n\n        <Weather\n          description={this.state.description}\n          city={this.state.city}\n          date={this.state.date}\n          temp={this.state.celcius ? this.state.tempFahrenheit : this.state.tempCelcius}\n          onClick={this.handleClick}\n          country={this.state.country}\n        />\n\n        <WeatherBox\n          humidity={this.state.humidity}\n          pressure={this.state.pressure}\n          tempMax={this.state.tempMax}\n          tempMin={this.state.tempMin}\n          windSpeed={this.state.windSpeed}\n          imageSrc={this.state.icon\n              ? `https://res.cloudinary.com/lucedesign/image/upload/v1509486590/svg%20weather%20icons/${idIconLookup[this.state.id]}`\n              : `https://res.cloudinary.com/lucedesign/image/upload/v1509486574/svg%20weather%20icons/weather.svg`\n          }\n        />\n      </div>\n    )\n  }\n}\n\n\n// Contains the weather, description, city, date, and temp\nconst Weather = props => (\n  <div>\n    <p>{props.description ? `${props.description} in ` : \"\"}\n      <span>\n        {props.city ? `${props.city.capitalize()}, ${props.country}` : \"\"}\n      </span>\n    </p>\n    <p>{props.date ? `${props.date}` : \"\"}</p>\n    <p onClick={props.onClick}>\n      {props.temp ? `${props.temp}˚F` : \"\"}\n    </p>\n  </div>\n);\n\n\n// The rounded weather box that contains the icon and additional weather data\nconst WeatherBox = props => (\n  <div>\n    <img className=\"weatherIcon\" src={props.imageSrc} alt='filler'/>\n      <p>\n      {props.tempMin && props.tempMax ?\n      `Lo/Hi : ${props.tempMin}°F / ${props.tempMax}˚F` : \"\"}\n      </p>\n      <p>{props.windSpeed ? `Wind Speed: ${props.windSpeed} mph` : \"\"}</p>\n      <p>{props.humidity ? `Humidity: ${props.humidity}%` : \"\"}</p>\n      <p>{props.pressure ? `Pressure: ${props.pressure} hPa` : \"\"}</p>\n  </div>\n);\n\n// Add a function to the String type to capitalize all letters in a sentence\nString.prototype.capitalize = function() {\n  return this.replace(/(?:^|\\s)\\S/g, function(a) {\n    return a.toUpperCase();\n  });\n};\n\n// Helper functions -------------------------------------------------\nlet toCelcius = (temp) => ((temp - 32) * 5 / 9).toFixed(1);\n\n\n// Check if it's between 6am and 6pm and return true or false\n// let isDayTime = () => {\n//   let date = new Date();\n//   let hour = date.getHours();\n//   (hour < 18 && hour > 6) ? true : false;\n// }\n\n// let formatSunrise = () => {\n\n// }\n\nisDayTime() ? formatSunrise() : formatSunset()\n\n\n\n\n// Get a pretty date\nlet formatDate = (date) => {\n  let monthNames = [\n    \"January\", \"February\", \"March\",\n    \"April\", \"May\", \"June\", \"July\",\n    \"August\", \"September\", \"October\",\n    \"November\", \"December\"\n  ];\n\n  let day = date.getDate();\n  let monthIndex = date.getMonth();\n  let year = date.getFullYear();\n\n  return `${monthNames[monthIndex]} ${day}, ${year}`;\n}\n\n\n\n// Icon Lookup Table ----------------------------------------------------------------------------\nlet idIconLookup = {\n  200: \"thunder.svg\",\n  201: \"thunder.svg\",\n  202: \"thunder.svg\",\n  210: \"thunder.svg\",\n  211: \"thunder.svg\",\n  212: \"thunder.svg\",\n  221: \"thunder.svg\",\n  230: \"thunder.svg\",\n  231: \"thunder.svg\",\n  232: \"thunder.svg\",\n  300: \"rainy-4.svg\",\n  301: \"rainy-4.svg\",\n  302: \"rainy-4.svg\",\n  310: \"rainy-5.svg\",\n  311: \"rainy-5.svg\",\n  312: \"rainy-5.svg\",\n  313: \"rainy-6.svg\",\n  314: \"rainy-6.svg\",\n  321: \"rainy-6.svg\",\n  500: \"rainy-7.svg\",\n  501: \"rainy-7.svg\",\n  502: \"rainy-7.svg\",\n  503: \"rainy-7.svg\",\n  504: \"rainy-7.svg\",\n  511: \"rainy-7.svg\",\n  520: \"rainy-7.svg\",\n  521: \"rainy-7.svg\",\n  522: \"rainy-7.svg\",\n  531: \"rainy-7.svg\",\n  600: \"snowy-4.svg\",\n  601: \"snowy-4.svg\",\n  611: \"snowy-4.svg\",\n  612: \"snowy-5.svg\",\n  615: \"snowy-5.svg\",\n  616: \"snowy-5.svg\",\n  620: \"snowy-6.svg\",\n  621: \"snow-6.svg\",\n  622: \"snowy-6.svg\",\n  701: \"cloudy.svg\",\n  711: \"cloudy.svg\",\n  721: \"cloudy.svg\",\n  731: \"cloudy.svg\",\n  741: \"cloudy.svg\",\n  751: \"cloudy.svg\",\n  761: \"cloudy.svg\",\n  762: \"cloudy.svg\",\n  771: \"cloudy.svg\",\n  781: \"cloudy.svg\",\n  800: isDayTime() ? \"day.svg\" : \"night.svg\",\n  801: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\",\n  802: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\",\n  803: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\",\n  804: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\"\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}