{"ast":null,"code":"import _classCallCheck from \"/Users/jamesroyston/Projects/fullstackreact_tut/weatherapp_fork_dluce/myapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jamesroyston/Projects/fullstackreact_tut/weatherapp_fork_dluce/myapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jamesroyston/Projects/fullstackreact_tut/weatherapp_fork_dluce/myapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jamesroyston/Projects/fullstackreact_tut/weatherapp_fork_dluce/myapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jamesroyston/Projects/fullstackreact_tut/weatherapp_fork_dluce/myapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/jamesroyston/Projects/fullstackreact_tut/weatherapp_fork_dluce/myapp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/jamesroyston/Projects/fullstackreact_tut/weatherapp_fork_dluce/myapp/src/App.js\";\nimport React from 'react';\nimport './App.css'; // import $ from 'jquery';\n\nimport axios from 'axios';\n\nvar getWeatherUrl = function getWeatherUrl(lat, long) {\n  return \"https://api.openweathermap.org/data/2.5/weather?lat=\".concat(lat, \"&lon=\").concat(long, \"&units=imperial&,us&appid=fa85391408d3e1a5d77d51507c0dfd61\");\n};\n\nvar getGeocoding = function getGeocoding(lat, long) {\n  return \"https://maps.googleapis.com/maps/api/geocode/json?latlng=\".concat(lat, \",\").concat(long, \"&sensor=true&key=AIzaSyCJB7ji6GSFhxbLO0GxtTqrbVa8LrOKkzo\");\n};\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      celcius: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"handleClick\",\n    value: function handleClick() {\n      this.setState({\n        celcius: !this.state.celcius\n      });\n    } // This function loads before the page loads. It is how I'm handling loading the\n    // data before it's pulled in with AJAX\n\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      if (navigator.geolocation) {\n        var success = function success(pos) {\n          var _this2 = this;\n\n          var crd = pos.coords;\n          var latitude = crd.latitude;\n          var longitude = crd.longitude;\n          this.serverRequest = axios.get(getWeatherUrl(latitude, longitude)).then(function (response) {\n            console.log(response);\n\n            _this2.setState({\n              tempFahrenheit: response.main.temp,\n              tempCelcius: toCelcius(response.main.temp),\n              humidity: response.main.humidity,\n              pressure: response.main.pressure,\n              tempMin: response.main.temp_min,\n              tempMax: response.main.temp_max,\n              seaLevel: response.main.sea_level,\n              windSpeed: (response.wind.speed / .44704).toFixed(2),\n              weather: response.weather[0].main,\n              description: response.weather[0].description.capitalize(),\n              id: response.weather[0].id,\n              icon: response.weather[0].icon,\n              sunrise: response.sys.sunrise,\n              sunset: response.sys.sunset,\n              latitude: response.latitude,\n              longitude: response.longitude,\n              date: formatDate(new Date()),\n              loading: false,\n              error: null\n            });\n          }).catch(function (err) {\n            _this2.setState({\n              loading: false,\n              error: err\n            });\n          });\n        };\n\n        var error = function error() {\n          alert('geolocation error');\n        };\n\n        navigator.geolocation.getCurrentPosition(success.bind(this), error);\n      } // After getting the coordinates from the browser\n      // we are making an AJAX call to get geocoding data from\n      // Google Maps API\n      // Axios.get(getGeocoding(geoGet.lat, geoGet.long).bind(this))\n      //     .then(\n      //       this.setState({\n      //         city: response.results.formatted_address,\n      //       })\n      //     )}\n\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(Weather, {\n        description: this.state.description,\n        city: this.state.city,\n        date: this.state.date,\n        temp: this.state.celcius ? this.state.tempFahrenheit : this.state.tempCelcius,\n        onClick: this.handleClick,\n        country: this.state.country,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }), React.createElement(WeatherBox, {\n        humidity: this.state.humidity,\n        pressure: this.state.pressure,\n        seaLevel: this.state.seaLevel,\n        tempMax: this.state.tempMax,\n        tempMin: this.state.tempMin,\n        windSpeed: this.state.windSpeed,\n        imageSrc: this.state.icon ? \"https://res.cloudinary.com/lucedesign/image/upload/v1509486590/svg%20weather%20icons/\".concat(idIconLookup[this.state.id]) : \"https://res.cloudinary.com/lucedesign/image/upload/v1509486574/svg%20weather%20icons/day.svg\",\n        country: this.state.country,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(React.Component); // Contains the weather, description, city, date, and temp\n\n\nvar Weather = function Weather(props) {\n  return React.createElement(\"div\", {\n    className: \"weather\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, props.description ? \"\".concat(props.description, \" in\") : \"\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, props.city ? \"\".concat(props.city) : \"\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, props.date ? \"\".concat(props.date) : \"\"), React.createElement(\"p\", {\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, props.temp ? \"\".concat(props.temp, \"\\xB0\") : \"\"));\n}; // The rounded weather box that contains the icon and additional weather data\n\n\nvar WeatherBox = function WeatherBox(props) {\n  return React.createElement(\"div\", {\n    className: \"weather-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"humidity container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, props.pressure ? \"Pressure: \".concat(props.pressure, \" hPa\") : \"\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, props.humidity ? \"Humidity: \".concat(props.humidity, \"%\") : \"\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, props.seaLevel ? \"Sea Level: \".concat(props.seaLevel) : \"\")), React.createElement(\"img\", {\n    src: props.imageSrc,\n    alt: \"alt filler text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"tempMax container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, props.tempMax ? \"Max Temp: \".concat(props.tempMax, \"\\xB0\") : \"\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, props.tempMin ? \"Min Temp: \".concat(props.tempMin, \"\\xB0\") : \"\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, props.windSpeed ? \"Wind Speed: \".concat(props.windSpeed, \" mph\") : \"\")));\n}; // Add a function to the String type to capitalize all letters in a sentence\n\n\nString.prototype.capitalize = function () {\n  return this.replace(/(?:^|\\s)\\S/g, function (a) {\n    return a.toUpperCase();\n  });\n}; // Helper functions -------------------------------------------------\n\n\nvar toCelcius = function toCelcius(temp) {\n  return ((temp - 32) * 5 / 9).toFixed(1);\n}; // Check if it's between 6am and 6pm and return true or false\n\n\nvar isDayTime = function isDayTime() {\n  var date = new Date();\n  var hour = date.getHours();\n\n  if (hour < 18 && hour > 6) {\n    return true;\n  } else {\n    return false;\n  }\n}; // Get a pretty date\n\n\nvar formatDate = function formatDate(date) {\n  var monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  var day = date.getDate();\n  var monthIndex = date.getMonth();\n  var year = date.getFullYear();\n  return \"\".concat(monthNames[monthIndex], \" \").concat(day, \", \").concat(year);\n}; // Icon Lookup Table ----------------------------------------------------------------------------\n\n\nvar idIconLookup = {\n  200: \"thunder.svg\",\n  201: \"thunder.svg\",\n  202: \"thunder.svg\",\n  210: \"thunder.svg\",\n  211: \"thunder.svg\",\n  212: \"thunder.svg\",\n  221: \"thunder.svg\",\n  230: \"thunder.svg\",\n  231: \"thunder.svg\",\n  232: \"thunder.svg\",\n  300: \"rainy-4.svg\",\n  301: \"rainy-4.svg\",\n  302: \"rainy-4.svg\",\n  310: \"rainy-5.svg\",\n  311: \"rainy-5.svg\",\n  312: \"rainy-5.svg\",\n  313: \"rainy-6.svg\",\n  314: \"rainy-6.svg\",\n  321: \"rainy-6.svg\",\n  500: \"rainy-7.svg\",\n  501: \"rainy-7.svg\",\n  502: \"rainy-7.svg\",\n  503: \"rainy-7.svg\",\n  504: \"rainy-7.svg\",\n  511: \"rainy-7.svg\",\n  520: \"rainy-7.svg\",\n  521: \"rainy-7.svg\",\n  522: \"rainy-7.svg\",\n  531: \"rainy-7.svg\",\n  600: \"snowy-4.svg\",\n  601: \"snowy-4.svg\",\n  611: \"snowy-4.svg\",\n  612: \"snowy-5.svg\",\n  615: \"snowy-5.svg\",\n  616: \"snowy-5.svg\",\n  620: \"snowy-6.svg\",\n  621: \"snow-6.svg\",\n  622: \"snowy-6.svg\",\n  701: \"cloudy.svg\",\n  711: \"cloudy.svg\",\n  721: \"cloudy.svg\",\n  731: \"cloudy.svg\",\n  741: \"cloudy.svg\",\n  751: \"cloudy.svg\",\n  761: \"cloudy.svg\",\n  762: \"cloudy.svg\",\n  771: \"cloudy.svg\",\n  781: \"cloudy.svg\",\n  800: isDayTime() ? \"day.svg\" : \"night.svg\",\n  801: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\",\n  802: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\",\n  803: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\",\n  804: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\"\n};\nexport default App;","map":{"version":3,"sources":["/Users/jamesroyston/Projects/fullstackreact_tut/weatherapp_fork_dluce/myapp/src/App.js"],"names":["React","axios","getWeatherUrl","lat","long","getGeocoding","App","handleClick","bind","state","celcius","setState","navigator","geolocation","success","pos","crd","coords","latitude","longitude","serverRequest","get","then","response","console","log","tempFahrenheit","main","temp","tempCelcius","toCelcius","humidity","pressure","tempMin","temp_min","tempMax","temp_max","seaLevel","sea_level","windSpeed","wind","speed","toFixed","weather","description","capitalize","id","icon","sunrise","sys","sunset","date","formatDate","Date","loading","error","catch","err","alert","getCurrentPosition","city","country","idIconLookup","Component","Weather","props","onClick","WeatherBox","imageSrc","String","prototype","replace","a","toUpperCase","isDayTime","hour","getHours","monthNames","day","getDate","monthIndex","getMonth","year","getFullYear"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n// import $ from 'jquery';\nimport axios from 'axios';\n\nconst getWeatherUrl = (lat, long) => {\n  return `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&units=imperial&,us&appid=fa85391408d3e1a5d77d51507c0dfd61`;\n};\n\nconst getGeocoding = (lat, long) => {\n  return `https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${long}&sensor=true&key=AIzaSyCJB7ji6GSFhxbLO0GxtTqrbVa8LrOKkzo`;\n};\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.handleClick = this.handleClick.bind(this);\n    this.state = {\n\n      celcius: true,\n\n    };\n  }\n  \n  handleClick() {\n    this.setState({\n      celcius: !this.state.celcius\n    });\n  }\n\n  // This function loads before the page loads. It is how I'm handling loading the\n  // data before it's pulled in with AJAX\n  componentWillMount() {\n    if (navigator.geolocation) {\n\n      function success(pos) {\n        let crd = pos.coords;\n        let latitude = crd.latitude;\n        let longitude = crd.longitude;\n        \n        this.serverRequest = axios.get(getWeatherUrl(latitude, longitude))\n          .then(response => {\n            console.log(response);\n            this.setState({\n              tempFahrenheit: response.main.temp,\n              tempCelcius: toCelcius(response.main.temp),\n              humidity: response.main.humidity,\n              pressure: response.main.pressure,\n              tempMin: response.main.temp_min,\n              tempMax: response.main.temp_max,\n              seaLevel: response.main.sea_level,\n              windSpeed: (response.wind.speed / .44704).toFixed(2),\n              weather: response.weather[0].main,\n              description: response.weather[0].description.capitalize(),\n              id: response.weather[0].id,\n              icon: response.weather[0].icon,\n              sunrise: response.sys.sunrise,\n              sunset: response.sys.sunset,\n              latitude: response.latitude,\n              longitude:  response.longitude,\n              date: formatDate(new Date()),\n              loading: false,\n              error: null,\n            });\n          })\n          .catch(err => {\n            this.setState({\n              loading: false,\n              error: err,\n            })\n          })\n      }\n\n      function error() {\n        alert('geolocation error');\n      }\n\n      navigator.geolocation.getCurrentPosition(success.bind(this), error);\n    }\n    // After getting the coordinates from the browser\n    // we are making an AJAX call to get geocoding data from\n    // Google Maps API\n    // Axios.get(getGeocoding(geoGet.lat, geoGet.long).bind(this))\n    //     .then(\n    //       this.setState({\n    //         city: response.results.formatted_address,\n    //       })\n    //     )}\n        }\n  render() {\n    return (\n      <div className=\"container\">\n        <Weather\n          description={this.state.description}\n          city={this.state.city}\n          date={this.state.date}\n          temp={this.state.celcius ? this.state.tempFahrenheit : this.state.tempCelcius}\n          onClick={this.handleClick}\n          country={this.state.country}\n        />\n        <WeatherBox\n          humidity={this.state.humidity}\n          pressure={this.state.pressure}\n          seaLevel={this.state.seaLevel}\n          tempMax={this.state.tempMax}\n          tempMin={this.state.tempMin}\n          windSpeed={this.state.windSpeed}\n          imageSrc={\n            this.state.icon\n              ? `https://res.cloudinary.com/lucedesign/image/upload/v1509486590/svg%20weather%20icons/${idIconLookup[this.state.id]}`\n              : `https://res.cloudinary.com/lucedesign/image/upload/v1509486574/svg%20weather%20icons/day.svg`\n          }\n          country={this.state.country}\n        />\n      </div>\n    )\n  }\n}\n\n// Contains the weather, description, city, date, and temp\nconst Weather = props => (\n  <div className=\"weather\">\n    <p>{props.description ? `${props.description} in` : \"\"}</p>\n    <p>{props.city ? `${props.city}` : \"\"}</p>\n    <p>{props.date ? `${props.date}` : \"\"}</p>\n    <p onClick={props.onClick}>{props.temp ? `${props.temp}°` : \"\"}</p>\n  </div>\n);\n\n\n// The rounded weather box that contains the icon and additional weather data\nconst WeatherBox = props => (\n  <div className=\"weather-box\">\n    <div className=\"humidity container\">\n      <p>{props.pressure ? `Pressure: ${props.pressure} hPa` : \"\"}</p>\n      <p>{props.humidity ? `Humidity: ${props.humidity}%` : \"\"}</p>\n      <p>{props.seaLevel ? `Sea Level: ${props.seaLevel}` : \"\"}</p>\n    </div>\n    <img src={props.imageSrc} \n         alt='alt filler text'/>\n    <div className=\"tempMax container\">\n      <p>{props.tempMax ? `Max Temp: ${props.tempMax}°` : \"\"}</p>\n      <p>{props.tempMin ? `Min Temp: ${props.tempMin}°` : \"\"}</p>\n      <p>{props.windSpeed ? `Wind Speed: ${props.windSpeed} mph` : \"\"}</p>\n    </div>\n  </div>\n);\n\n// Add a function to the String type to capitalize all letters in a sentence\nString.prototype.capitalize = function() {\n  return this.replace(/(?:^|\\s)\\S/g, function(a) {\n    return a.toUpperCase();\n  });\n};\n\n// Helper functions -------------------------------------------------\nlet toCelcius = (temp) => ((temp - 32) * 5 / 9).toFixed(1);\n\n\n// Check if it's between 6am and 6pm and return true or false\nlet isDayTime = () => {\n  let date = new Date();\n  let hour = date.getHours();\n  if (hour < 18 && hour > 6) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n\n// Get a pretty date\nlet formatDate = (date) => {\n  let monthNames = [\n    \"January\", \"February\", \"March\",\n    \"April\", \"May\", \"June\", \"July\",\n    \"August\", \"September\", \"October\",\n    \"November\", \"December\"\n  ];\n\n  let day = date.getDate();\n  let monthIndex = date.getMonth();\n  let year = date.getFullYear();\n\n  return `${monthNames[monthIndex]} ${day}, ${year}`;\n}\n\n\n\n// Icon Lookup Table ----------------------------------------------------------------------------\nlet idIconLookup = {\n  200: \"thunder.svg\",\n  201: \"thunder.svg\",\n  202: \"thunder.svg\",\n  210: \"thunder.svg\",\n  211: \"thunder.svg\",\n  212: \"thunder.svg\",\n  221: \"thunder.svg\",\n  230: \"thunder.svg\",\n  231: \"thunder.svg\",\n  232: \"thunder.svg\",\n  300: \"rainy-4.svg\",\n  301: \"rainy-4.svg\",\n  302: \"rainy-4.svg\",\n  310: \"rainy-5.svg\",\n  311: \"rainy-5.svg\",\n  312: \"rainy-5.svg\",\n  313: \"rainy-6.svg\",\n  314: \"rainy-6.svg\",\n  321: \"rainy-6.svg\",\n  500: \"rainy-7.svg\",\n  501: \"rainy-7.svg\",\n  502: \"rainy-7.svg\",\n  503: \"rainy-7.svg\",\n  504: \"rainy-7.svg\",\n  511: \"rainy-7.svg\",\n  520: \"rainy-7.svg\",\n  521: \"rainy-7.svg\",\n  522: \"rainy-7.svg\",\n  531: \"rainy-7.svg\",\n  600: \"snowy-4.svg\",\n  601: \"snowy-4.svg\",\n  611: \"snowy-4.svg\",\n  612: \"snowy-5.svg\",\n  615: \"snowy-5.svg\",\n  616: \"snowy-5.svg\",\n  620: \"snowy-6.svg\",\n  621: \"snow-6.svg\",\n  622: \"snowy-6.svg\",\n  701: \"cloudy.svg\",\n  711: \"cloudy.svg\",\n  721: \"cloudy.svg\",\n  731: \"cloudy.svg\",\n  741: \"cloudy.svg\",\n  751: \"cloudy.svg\",\n  761: \"cloudy.svg\",\n  762: \"cloudy.svg\",\n  771: \"cloudy.svg\",\n  781: \"cloudy.svg\",\n  800: isDayTime() ? \"day.svg\" : \"night.svg\",\n  801: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\",\n  802: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\",\n  803: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\",\n  804: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\"\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}