{"ast":null,"code":"import _classCallCheck from \"/Users/jamesroyston/Projects/fullstackreact_tut/weatherapp_fork_dluce/myapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jamesroyston/Projects/fullstackreact_tut/weatherapp_fork_dluce/myapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jamesroyston/Projects/fullstackreact_tut/weatherapp_fork_dluce/myapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jamesroyston/Projects/fullstackreact_tut/weatherapp_fork_dluce/myapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jamesroyston/Projects/fullstackreact_tut/weatherapp_fork_dluce/myapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jamesroyston/Projects/fullstackreact_tut/weatherapp_fork_dluce/myapp/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Form from './components/Form.js';\nimport Weather from './components/Weather.js';\nimport WeatherBox from './components/WeatherBox.js';\nvar key = '41964d2653c96175c88d49f6ba567677';\n\nvar getWeatherUrl = function getWeatherUrl(city) {\n  return \"https://api.openweathermap.org/data/2.5/weather?q=\".concat(city, \",us&units=imperial&,us&appid=\").concat(key);\n};\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));\n    _this.state = {\n      city: ''\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"getWeather\",\n    value: function getWeather(city) {\n      var _this2 = this;\n\n      axios.get(getWeatherUrl(city)).then(function (response) {\n        console.log(response.data.name);\n        _this2.setState = {\n          name: response.data.name,\n          tempFahrenheit: response.data.main.temp,\n          // tempCelcius: toCelcius(response.data.main.temp),\n          humidity: response.data.main.humidity,\n          pressure: response.data.main.pressure,\n          tempMin: response.data.main.temp_min,\n          tempMax: response.data.main.temp_max,\n          windSpeed: (response.data.wind.speed / .44704).toFixed(2),\n          weather: response.data.weather[0].main,\n          country: response.data.sys.country,\n          description: response.data.weather[0].description.capitalize(),\n          id: response.data.weather[0].id,\n          icon: \"http://openweathermap.org/img/w/\".concat(response.data.weather[0].icon, \".png\"),\n          sunrise: formatTime(response.data.sys.sunrise),\n          sunset: formatTime(response.data.sys.sunset),\n          latitude: response.data.latitude,\n          longitude: response.data.longitude,\n          date: formatDate(new Date()),\n          loading: false,\n          error: null\n        };\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      function handleSubmit(e) {\n        e.preventDefault();\n\n        if (this.state.city === '') {\n          return false;\n        } else this.getWeather(this.state.city);\n      }\n\n      function handleChange(e) {\n        console.log(e.target.value);\n        this.setState({\n          city: e.target.value.split(' ').join('+')\n        });\n      }\n\n      var state = this.state;\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: function onSubmit() {\n          return handleSubmit;\n        },\n        onChange: handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }), React.createElement(Weather, {\n        imageSrc: state.icon ? \"https://res.cloudinary.com/lucedesign/image/upload/v1509486590/svg%20weather%20icons/\".concat(idIconLookup[this.state.id]) : \"https://res.cloudinary.com/lucedesign/image/upload/v1509486574/svg%20weather%20icons/weather.svg\",\n        description: state.description,\n        city: state.name,\n        date: state.date,\n        temp: state.tempFahrenheit,\n        country: state.country,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }), React.createElement(WeatherBox, {\n        sunMovement: isDayTime() ? \"Sunset: \".concat(this.state.sunset) : \"Sunrise: \".concat(state.sunrise),\n        humidity: state.humidity,\n        pressure: state.pressure,\n        tempMax: state.tempMax,\n        tempMin: state.tempMin,\n        windSpeed: state.windSpeed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(React.Component); // Check if it's between 6am and 6pm and return true or false\n\n\nvar isDayTime = function isDayTime() {\n  var date = new Date();\n  var hour = date.getHours();\n\n  if (hour < 18 && hour > 6) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nvar afterNoonCheck = function afterNoonCheck() {\n  var date = new Date();\n  var hours = date.getHours();\n  var isAfterNoon = hours >= 12 ? true : false;\n  return isAfterNoon;\n};\n\nvar formatTime = function formatTime(time) {\n  var date = new Date(time * 1000); // Hours part from the timestamp\n\n  var hours = date.getHours();\n  hours = hours > 12 ? hours - 12 : hours; // Minutes part from the timestamp\n\n  var minutes = \"0\" + date.getMinutes(); // Will display time in HH:MM format\n\n  var formattedTime = hours + ':' + minutes.substr(-2);\n  return formattedTime + (!afterNoonCheck() ? 'PM' : 'AM');\n}; // Get a pretty date\n\n\nvar formatDate = function formatDate(date) {\n  var monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  var day = date.getDate();\n  var monthIndex = date.getMonth();\n  var year = date.getFullYear();\n  return \"\".concat(monthNames[monthIndex], \" \").concat(day, \", \").concat(year);\n}; // Icon Lookup Table ----------------------------------------------------------------------------\n\n\nvar idIconLookup = {\n  200: \"thunder.svg\",\n  201: \"thunder.svg\",\n  202: \"thunder.svg\",\n  210: \"thunder.svg\",\n  211: \"thunder.svg\",\n  212: \"thunder.svg\",\n  221: \"thunder.svg\",\n  230: \"thunder.svg\",\n  231: \"thunder.svg\",\n  232: \"thunder.svg\",\n  300: \"rainy-4.svg\",\n  301: \"rainy-4.svg\",\n  302: \"rainy-4.svg\",\n  310: \"rainy-5.svg\",\n  311: \"rainy-5.svg\",\n  312: \"rainy-5.svg\",\n  313: \"rainy-6.svg\",\n  314: \"rainy-6.svg\",\n  321: \"rainy-6.svg\",\n  500: \"rainy-7.svg\",\n  501: \"rainy-7.svg\",\n  502: \"rainy-7.svg\",\n  503: \"rainy-7.svg\",\n  504: \"rainy-7.svg\",\n  511: \"rainy-7.svg\",\n  520: \"rainy-7.svg\",\n  521: \"rainy-7.svg\",\n  522: \"rainy-7.svg\",\n  531: \"rainy-7.svg\",\n  600: \"snowy-4.svg\",\n  601: \"snowy-4.svg\",\n  611: \"snowy-4.svg\",\n  612: \"snowy-5.svg\",\n  615: \"snowy-5.svg\",\n  616: \"snowy-5.svg\",\n  620: \"snowy-6.svg\",\n  621: \"snow-6.svg\",\n  622: \"snowy-6.svg\",\n  701: \"cloudy.svg\",\n  711: \"cloudy.svg\",\n  721: \"cloudy.svg\",\n  731: \"cloudy.svg\",\n  741: \"cloudy.svg\",\n  751: \"cloudy.svg\",\n  761: \"cloudy.svg\",\n  762: \"cloudy.svg\",\n  771: \"cloudy.svg\",\n  781: \"cloudy.svg\",\n  800: isDayTime() ? \"day.svg\" : \"night.svg\",\n  801: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\",\n  802: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\",\n  803: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\",\n  804: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\"\n};\nexport default App;","map":{"version":3,"sources":["/Users/jamesroyston/Projects/fullstackreact_tut/weatherapp_fork_dluce/myapp/src/App.js"],"names":["React","axios","Form","Weather","WeatherBox","key","getWeatherUrl","city","App","state","get","then","response","console","log","data","name","setState","tempFahrenheit","main","temp","humidity","pressure","tempMin","temp_min","tempMax","temp_max","windSpeed","wind","speed","toFixed","weather","country","sys","description","capitalize","id","icon","sunrise","formatTime","sunset","latitude","longitude","date","formatDate","Date","loading","error","handleSubmit","e","preventDefault","getWeather","handleChange","target","value","split","join","idIconLookup","isDayTime","Component","hour","getHours","afterNoonCheck","hours","isAfterNoon","time","minutes","getMinutes","formattedTime","substr","monthNames","day","getDate","monthIndex","getMonth","year","getFullYear"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Form from './components/Form.js';\nimport Weather from './components/Weather.js';\nimport WeatherBox from './components/WeatherBox.js';\n\nconst key = '41964d2653c96175c88d49f6ba567677';\n\nconst getWeatherUrl = (city) => {\n  return `https://api.openweathermap.org/data/2.5/weather?q=${city},us&units=imperial&,us&appid=${key}`;\n};\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      city: ''\n    }\n  }\n\n\n\n  getWeather(city) {\n    axios.get(getWeatherUrl(city))\n    .then(response => {\n      console.log(response.data.name)\n      this.setState = {\n        name: response.data.name,\n        tempFahrenheit: response.data.main.temp,\n        // tempCelcius: toCelcius(response.data.main.temp),\n        humidity: response.data.main.humidity,\n        pressure: response.data.main.pressure,\n        tempMin: response.data.main.temp_min,\n        tempMax: response.data.main.temp_max,\n        windSpeed: (response.data.wind.speed / .44704).toFixed(2),\n        weather: response.data.weather[0].main,\n        country: response.data.sys.country,\n        description: response.data.weather[0].description.capitalize(),\n        id: response.data.weather[0].id,\n        icon: `http://openweathermap.org/img/w/${response.data.weather[0].icon}.png`,\n        sunrise: formatTime(response.data.sys.sunrise),\n        sunset: formatTime(response.data.sys.sunset),\n        latitude: response.data.latitude,\n        longitude:  response.data.longitude,\n        date: formatDate(new Date()),\n        loading: false,\n        error: null,\n      }\n    })\n  }\n\n\n  render() {\n\n    function handleSubmit(e) {\n      e.preventDefault()\n      if(this.state.city === '') {\n        return false;\n      } else (\n        this.getWeather(this.state.city)\n      )\n    }\n  \n    function handleChange(e) {\n     console.log(e.target.value)\n        this.setState({\n          city: e.target.value.split(' ').join('+'),\n        })\n      \n    }\n\n    let state = this.state;\n    return (\n      \n      <div className=\"container\">\n\n        <Form \n          onSubmit={() => (handleSubmit)}\n          onChange={handleChange}\n        />\n\n        <Weather\n          imageSrc={state.icon\n            ? `https://res.cloudinary.com/lucedesign/image/upload/v1509486590/svg%20weather%20icons/${idIconLookup[this.state.id]}`\n            : `https://res.cloudinary.com/lucedesign/image/upload/v1509486574/svg%20weather%20icons/weather.svg`\n          }\n          description={state.description}\n          city={state.name}\n          date={state.date}\n          temp={state.tempFahrenheit}\n          country={state.country}\n        />\n\n\n        <WeatherBox\n          sunMovement={isDayTime() ? `Sunset: ${this.state.sunset}` :\n           `Sunrise: ${state.sunrise}`}\n          humidity={state.humidity}\n          pressure={state.pressure}\n          tempMax={state.tempMax}\n          tempMin={state.tempMin}\n          windSpeed={state.windSpeed}\n          \n        />\n      </div>\n    )\n  }\n}\n\n// Check if it's between 6am and 6pm and return true or false\nlet isDayTime = () => {\n  let date = new Date();\n  let hour = date.getHours();\n  if (hour < 18 && hour > 6) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nlet afterNoonCheck = () => {\n  let date = new Date();\n  let hours = date.getHours();\n  let isAfterNoon = (hours >= 12) ? true : false;\n  return isAfterNoon;\n}\n\nlet formatTime = (time) => {\n  let date = new Date(time*1000);\n// Hours part from the timestamp\n  let hours = date.getHours();\n  hours = (hours > 12) ? hours - 12 : hours;\n// Minutes part from the timestamp\n  let minutes = \"0\" + date.getMinutes();\n// Will display time in HH:MM format\n  let formattedTime = hours + ':' + minutes.substr(-2);\n  return formattedTime + (!afterNoonCheck() ? 'PM' : 'AM')\n};\n\n// Get a pretty date\nlet formatDate = (date) => {\n  let monthNames = [\n    \"January\", \"February\", \"March\",\n    \"April\", \"May\", \"June\", \"July\",\n    \"August\", \"September\", \"October\",\n    \"November\", \"December\"\n  ];\n\n  let day = date.getDate();\n  let monthIndex = date.getMonth();\n  let year = date.getFullYear();\n\n  return `${monthNames[monthIndex]} ${day}, ${year}`;\n}\n\n\n\n// Icon Lookup Table ----------------------------------------------------------------------------\nlet idIconLookup = {\n  200: \"thunder.svg\",\n  201: \"thunder.svg\",\n  202: \"thunder.svg\",\n  210: \"thunder.svg\",\n  211: \"thunder.svg\",\n  212: \"thunder.svg\",\n  221: \"thunder.svg\",\n  230: \"thunder.svg\",\n  231: \"thunder.svg\",\n  232: \"thunder.svg\",\n  300: \"rainy-4.svg\",\n  301: \"rainy-4.svg\",\n  302: \"rainy-4.svg\",\n  310: \"rainy-5.svg\",\n  311: \"rainy-5.svg\",\n  312: \"rainy-5.svg\",\n  313: \"rainy-6.svg\",\n  314: \"rainy-6.svg\",\n  321: \"rainy-6.svg\",\n  500: \"rainy-7.svg\",\n  501: \"rainy-7.svg\",\n  502: \"rainy-7.svg\",\n  503: \"rainy-7.svg\",\n  504: \"rainy-7.svg\",\n  511: \"rainy-7.svg\",\n  520: \"rainy-7.svg\",\n  521: \"rainy-7.svg\",\n  522: \"rainy-7.svg\",\n  531: \"rainy-7.svg\",\n  600: \"snowy-4.svg\",\n  601: \"snowy-4.svg\",\n  611: \"snowy-4.svg\",\n  612: \"snowy-5.svg\",\n  615: \"snowy-5.svg\",\n  616: \"snowy-5.svg\",\n  620: \"snowy-6.svg\",\n  621: \"snow-6.svg\",\n  622: \"snowy-6.svg\",\n  701: \"cloudy.svg\",\n  711: \"cloudy.svg\",\n  721: \"cloudy.svg\",\n  731: \"cloudy.svg\",\n  741: \"cloudy.svg\",\n  751: \"cloudy.svg\",\n  761: \"cloudy.svg\",\n  762: \"cloudy.svg\",\n  771: \"cloudy.svg\",\n  781: \"cloudy.svg\",\n  800: isDayTime() ? \"day.svg\" : \"night.svg\",\n  801: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\",\n  802: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\",\n  803: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\",\n  804: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\"\n};\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}