{"ast":null,"code":"// Check if it's between 6am and 6pm and return true or false\nvar isDayTime = function isDayTime() {\n  var date = new Date();\n  var hour = date.getHours();\n\n  if (hour < 18 && hour > 6) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nvar afterNoonCheck = function afterNoonCheck() {\n  var date = new Date();\n  var hours = date.getHours();\n  var isAfterNoon = hours >= 12 ? true : false;\n  return isAfterNoon;\n};\n\nvar formatTime = function formatTime(time) {\n  var date = new Date(time * 1000); // Hours part from the timestamp\n\n  var hours = date.getHours();\n  hours = hours > 12 ? hours - 12 : hours; // Minutes part from the timestamp\n\n  var minutes = \"0\" + date.getMinutes(); // Will display time in HH:MM format\n\n  var formattedTime = hours + ':' + minutes.substr(-2);\n  return formattedTime + (!afterNoonCheck() ? 'PM' : 'AM');\n};\n\nvar currentTime = function currentTime() {\n  var date = new Date();\n  var hours = date.getHours();\n  hours = hours > 12 ? hours - 12 : hours;\n  var minutes = \"0\" + date.getMinutes();\n  var formattedTime = hours + ':' + minutes.substr(-2);\n  return formattedTime + (afterNoonCheck() ? 'PM' : 'AM');\n}; // Get a pretty date\n\n\nvar formatDate = function formatDate(date) {\n  var monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  var day = date.getDate();\n  var monthIndex = date.getMonth();\n  var year = date.getFullYear();\n  return \"\".concat(monthNames[monthIndex], \" \").concat(day, \", \").concat(year);\n}; // Icon Lookup Table ----------------------------------------------------------------------------\n\n\nvar idIconLookup = {\n  200: \"thunder.svg\",\n  201: \"thunder.svg\",\n  202: \"thunder.svg\",\n  210: \"thunder.svg\",\n  211: \"thunder.svg\",\n  212: \"thunder.svg\",\n  221: \"thunder.svg\",\n  230: \"thunder.svg\",\n  231: \"thunder.svg\",\n  232: \"thunder.svg\",\n  300: \"rainy-4.svg\",\n  301: \"rainy-4.svg\",\n  302: \"rainy-4.svg\",\n  310: \"rainy-5.svg\",\n  311: \"rainy-5.svg\",\n  312: \"rainy-5.svg\",\n  313: \"rainy-6.svg\",\n  314: \"rainy-6.svg\",\n  321: \"rainy-6.svg\",\n  500: \"rainy-7.svg\",\n  501: \"rainy-7.svg\",\n  502: \"rainy-7.svg\",\n  503: \"rainy-7.svg\",\n  504: \"rainy-7.svg\",\n  511: \"rainy-7.svg\",\n  520: \"rainy-7.svg\",\n  521: \"rainy-7.svg\",\n  522: \"rainy-7.svg\",\n  531: \"rainy-7.svg\",\n  600: \"snowy-4.svg\",\n  601: \"snowy-4.svg\",\n  611: \"snowy-4.svg\",\n  612: \"snowy-5.svg\",\n  615: \"snowy-5.svg\",\n  616: \"snowy-5.svg\",\n  620: \"snowy-6.svg\",\n  621: \"snow-6.svg\",\n  622: \"snowy-6.svg\",\n  701: \"cloudy.svg\",\n  711: \"cloudy.svg\",\n  721: \"cloudy.svg\",\n  731: \"cloudy.svg\",\n  741: \"cloudy.svg\",\n  751: \"cloudy.svg\",\n  761: \"cloudy.svg\",\n  762: \"cloudy.svg\",\n  771: \"cloudy.svg\",\n  781: \"cloudy.svg\",\n  800: isDayTime() ? \"day.svg\" : \"night.svg\",\n  801: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\",\n  802: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\",\n  803: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\",\n  804: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\"\n};\nexport default {\n  idIconLookup: idIconLookup,\n  isDayTime: isDayTime,\n  currentTime: currentTime,\n  formatDate: formatDate,\n  formatTime: formatTime,\n  afterNoonCheck: afterNoonCheck\n};","map":{"version":3,"sources":["/Users/jamesroyston/Projects/fullstackreact_tut/weatherapp_fork_dluce/myapp/src/helperFunctions.js"],"names":["isDayTime","date","Date","hour","getHours","afterNoonCheck","hours","isAfterNoon","formatTime","time","minutes","getMinutes","formattedTime","substr","currentTime","formatDate","monthNames","day","getDate","monthIndex","getMonth","year","getFullYear","idIconLookup"],"mappings":"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","sourcesContent":["// Check if it's between 6am and 6pm and return true or false\nlet isDayTime = () => {\n  let date = new Date();\n  let hour = date.getHours();\n  if (hour < 18 && hour > 6) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nlet afterNoonCheck = () => {\n  let date = new Date();\n  let hours = date.getHours();\n  let isAfterNoon = (hours >= 12) ? true : false;\n  return isAfterNoon;\n}\n\nlet formatTime = (time) => {\n  let date = new Date(time*1000);\n// Hours part from the timestamp\n  let hours = date.getHours();\n  hours = (hours > 12) ? hours - 12 : hours;\n// Minutes part from the timestamp\n  let minutes = \"0\" + date.getMinutes();\n// Will display time in HH:MM format\n  let formattedTime = hours + ':' + minutes.substr(-2);\n  return formattedTime + (!afterNoonCheck() ? 'PM' : 'AM')\n};\n\nlet currentTime = () => {\n  let date = new Date();\n  let hours = date.getHours();\n  hours = (hours > 12) ? hours - 12 : hours;\n  let minutes = \"0\" + date.getMinutes();\n  let formattedTime = hours + ':' + minutes.substr(-2)\n  return formattedTime + (afterNoonCheck() ? 'PM' : 'AM');\n}\n\n\n\n// Get a pretty date\nlet formatDate = (date) => {\n  let monthNames = [\n    \"January\", \"February\", \"March\",\n    \"April\", \"May\", \"June\", \"July\",\n    \"August\", \"September\", \"October\",\n    \"November\", \"December\"\n  ];\n\n  let day = date.getDate();\n  let monthIndex = date.getMonth();\n  let year = date.getFullYear();\n\n  return `${monthNames[monthIndex]} ${day}, ${year}`;\n}\n\n\n\n// Icon Lookup Table ----------------------------------------------------------------------------\nlet idIconLookup = {\n  200: \"thunder.svg\",\n  201: \"thunder.svg\",\n  202: \"thunder.svg\",\n  210: \"thunder.svg\",\n  211: \"thunder.svg\",\n  212: \"thunder.svg\",\n  221: \"thunder.svg\",\n  230: \"thunder.svg\",\n  231: \"thunder.svg\",\n  232: \"thunder.svg\",\n  300: \"rainy-4.svg\",\n  301: \"rainy-4.svg\",\n  302: \"rainy-4.svg\",\n  310: \"rainy-5.svg\",\n  311: \"rainy-5.svg\",\n  312: \"rainy-5.svg\",\n  313: \"rainy-6.svg\",\n  314: \"rainy-6.svg\",\n  321: \"rainy-6.svg\",\n  500: \"rainy-7.svg\",\n  501: \"rainy-7.svg\",\n  502: \"rainy-7.svg\",\n  503: \"rainy-7.svg\",\n  504: \"rainy-7.svg\",\n  511: \"rainy-7.svg\",\n  520: \"rainy-7.svg\",\n  521: \"rainy-7.svg\",\n  522: \"rainy-7.svg\",\n  531: \"rainy-7.svg\",\n  600: \"snowy-4.svg\",\n  601: \"snowy-4.svg\",\n  611: \"snowy-4.svg\",\n  612: \"snowy-5.svg\",\n  615: \"snowy-5.svg\",\n  616: \"snowy-5.svg\",\n  620: \"snowy-6.svg\",\n  621: \"snow-6.svg\",\n  622: \"snowy-6.svg\",\n  701: \"cloudy.svg\",\n  711: \"cloudy.svg\",\n  721: \"cloudy.svg\",\n  731: \"cloudy.svg\",\n  741: \"cloudy.svg\",\n  751: \"cloudy.svg\",\n  761: \"cloudy.svg\",\n  762: \"cloudy.svg\",\n  771: \"cloudy.svg\",\n  781: \"cloudy.svg\",\n  800: isDayTime() ? \"day.svg\" : \"night.svg\",\n  801: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\",\n  802: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\",\n  803: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\",\n  804: isDayTime() ? \"cloudy-day-3.svg\" : \"cloudy-night-3.svg\"\n};\n\nexport default { idIconLookup, isDayTime, currentTime, formatDate, formatTime, afterNoonCheck }\n"]},"metadata":{},"sourceType":"module"}